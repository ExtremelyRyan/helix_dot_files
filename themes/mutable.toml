# Template document for helix color schemes
# See also: https://docs.helix-editor.com/themes.html
#
# NOTE: Keys default to the most specific parent value.
#       e.g ui.cursor.primary > ui.cursor > ui



# GENERAL ==============================

warning = "yellow" # Editor warnings.
error = "red" # Editor errors, like mis-typing a command.
info = "green" # Contextual info in diagnostic messages (LSP).
hint = "blue" # Code diagnostics hints (LSP).
diagnostic = { modifiers = ["underlined"] } # Code diagnostics in editing area (LSP).

# UI ==============================
# For styling helix itself.

'ui.background' = { bg = "black" } # Default background color.
"ui.background.separator" = "grey"
'ui.window' = { } # Window border between splits.
'ui.gutter' = { } # Left gutter for diagnostics and breakpoints.

'ui.text' = "fg" # Default text color.
'ui.text.focus' = "blue" # Selection highlight in buffer-picker or file-picker.
'ui.text.info' = { } # Info popup contents (space mode menu).

'ui.cursor' = {  } # Fallback cursor colour, non-primary cursors when there are multiple (shift-c).
'ui.cursor.primary' = { bg = "bg1" } # The primary cursor when there are multiple (shift-c).
'ui.cursor.insert' = { fg = "black", bg = "grey" } # The cursor in insert mode (i).
'ui.cursor.select' = { } # The cursor in select mode (v).
'ui.cursor.match' = { fg = "orange", bg = "diff_yellow" } # The matching parentheses of that under the cursor.

'ui.selection' = { fg = "white", bg = "blue" } # All currently selected text.
'ui.selection.primary' = { bg = "bg4" } # The primary selecion when there are multiple.

'ui.linenr' = "grey" # Line numbers.
'ui.linenr.selected' = "fg" # Current line number.

'ui.virtual' = { } # Namespace for additions to the editing area.
"ui.virtual.inlay-hint" = { fg = "bg5" }  # Default style for inlay hints of all kinds
'ui.virtual.ruler' = { bg = "bg2" } # Vertical rulers (colored columns in editing area).
'ui.virtual.whitespace' = { } # Whitespace markers in editing area.

"ui.statusline" = { fg = "fg", bg = "bg3" } # Status line.
"ui.statusline.inactive" = { fg = "grey", bg = "bg1" } # Status line in unfocused windows.
"ui.statusline.normal" = { fg = "bg0", bg = "fg", modifiers = ["bold"] } # Statusline mode during normal mode (only if editor.color-modes is enabled)
"ui.statusline.insert" = { fg = "bg0", bg = "purple", modifiers = ["bold"] } # Statusline mode during insert mode (only if editor.color-modes is enabled)
"ui.statusline.select" = { fg = "bg0", bg = "blue", modifiers = ["bold"] } # Statusline mode during select mode (only if editor.color-modes is enabled)

"ui.help" = { fg = "fg", bg = "bg1" } # `:command` descriptions above the command line.

'ui.highlight' = { } # selected contents of symbol pickers (spc-s, spc-S) and current line in buffer picker (spc-b).

"ui.menu" = { fg = "fg", bg = "bg2" } # Autocomplete menu.
"ui.menu.selected" = { fg = "bg0", bg = "blue" } # Selected autocomplete item.

"ui.popup" = { fg = "grey", bg = "bg2" } # Documentation popups (space-k).
'ui.popup.info' = { } # Info popups box (space mode menu).


# SYNTAX HIGHLIGHTING ==============================
# All the keys here are Treesitter scopes.

'property' = { } # Regex group names.
"special" = "red" # Special symbols e.g `?` in Rust, `...` in Hare.
"attribute" = "cyan" # Class attributes, html tag attributes.

"type" = "fg" # Variable type, like integer or string, including program defined classes, structs etc..
'type.builtin' = { } # Primitive types of the language (string, int, float).
'type.enum.variant' = "blue" # A variant of an enum.

"constructor" = "blue2" # Constructor method for a class or struct.

"constant" = "red"  # Constant value
'constant.builtin' = { } # Special constants like `true`, `false`, `none`, etc.
'constant.builtin.boolean' = { } # True or False.
'constant.character' = { } # Constant of character type.
'constant.character.escape' = { } # escape codes like \n.
"constant.numeric" = "numbers" # constant integer or float value.
'constant.numeric.integer' = { } # constant integer value.
'constant.numeric.float' = { } # constant float value.

'string' = "green" # String literal.
'string.regexp' = "" # Regular expression literal.
'string.special' = { } # Strings containing a path, URL, etc.
'string.special.path' = { } # String containing a file path.
'string.special.url' = { } # String containing a web URL.
'string.special.symbol' = { } # Erlang/Elixir atoms, Ruby symbols, Clojure keywords.

'comment' = "comments" # This is a comment.
'comment.line' = { } # Line comments, like this.
'comment.block' = { } # Block comments, like /* this */ in some languages.
'comment.block.documentation' = { } # Doc comments, e.g '///' in rust.

'variable' = "" # Variable names.
'variable.builtin' = "fg" # Language reserved variables: `this`, `self`, `super`, etc.
'variable.parameter' = "" # Function parameters.
'variable.other.member' = "" # Fields of composite data types (e.g. structs, unions).

'label' = "orange" # Loop labels, among other things.

'punctuation' = { } # Any punctuation symbol.
'punctuation.delimiter' = { } # Commas, colons or other delimiter depending on the language.
'punctuation.bracket' = { } # Parentheses, angle brackets, etc.

'keyword' = "purple2" # Language reserved keywords.
'keyword.control' = "" # Control keywords.
'keyword.control.conditional' = "purple" # `if`, `else`, `elif`.
'keyword.control.repeat' = { } # `for`, `while`, `loop`.
'keyword.control.import' = "pink" # `import`, `export` `use`.
'keyword.control.return' = { } # `return` in most languages.
'keyword.control.exception' = { } # `try`, `catch`, `raise`/`throw` and related.
'keyword.operator' = { } # `or`, `and`, `in`.
'keyword.directive' = "cyan" # Preprocessor directives (#if in C...).
'keyword.function' = "cyan" # The keyword to define a function: 'def', 'fun', 'fn'.

'operator' = "red" # Logical, mathematical, and other operators.

'function' = "func"
'function.builtin' = { }
'function.method' = { } # Class / Struct methods.
'function.macro' = "macro"
'function.special' = { } # Preprocessor function in C.

'tag' = { } # As in <body> for html, css tags.
'tag.error' = { } # Erroneous closing html tags.

'namespace' = { } # Namespace or module identifier.


# Markup ==============================
# Colors for markup languages, like Markdown or XML.

"markup.heading.1" = { fg = "purple", modifiers = ["bold"] }   # Markdown heading 1 color.
"markup.heading.2" = { fg = "red", modifiers = ["bold"] }   # Markdown heading 2 color.
"markup.heading.3" = { fg = "blue", modifiers = ["bold"] }   # Markdown heading 3 color.
"markup.heading.4" = { fg = "yellow", modifiers = ["bold"] }   # Markdown heading 4 color.
"markup.heading.5" = { fg = "green", modifiers = ["bold"] }   # Markdown heading 5 color.
"markup.heading.6" = { fg = "fg", modifiers = ["bold"] }   # Markdown heading 6 color.
"markup.heading.marker" = "grey" # Hashtag color on Markdown headings.

"markup.list" = "red" 
'markup.list.numbered' = { } # Numbered list.
'markup.list.unnumbered' = { } # Bullet point list.

'markup.bold' = { } # Bold text.
'markup.italic' = { } # Italicised text.

'markup.link' = { }
"markup.link.url" = { fg = "green", modifiers = ["underlined"] } # Urls pointed to by links.
'markup.link.label' = { } # Non-URL link references.
"markup.link.text" = "purple" # URL and image descriptions in links.

'markup.quote' = "grey" # `> Quotes` in Markdown.


# Markup - Interface ==============================
# "These scopes are used for theming the editor interface."

'markup.normal' = { }
'markup.normal.completion' = { } # For completion doc popup ui.
'markup.normal.raw' = { } # For hover popup ui.

'markup.heading.completion' = { } # Headings for completion doc popup ui.
'markup.heading.raw' = { } # Headings for hover popup ui.

'markup.raw' = { } # Code block in Markdown.
'markup.raw.block' = { } # Multiline (```) codeblock in Markdown.
'markup.raw.inline' = { } # `Inline code block` in Markdown.
'markup.raw.inline.completion' = { } # ?
'markup.raw.inline.hover' = { } # ?

# Diff ==============================
# Version control changes.

"diff.plus" = "green"# Additions.
"diff.delta" = "orange" # Deletions.
"diff.minus" = "red" # Modifications.
'diff.delta.moved' = { } # Renamed or moved files.


[palette] # Define your custom colors here.
bg_blue     = "#6cb6eb"
bg_green    = "#a0c980"
bg_grey     = "#7a819d"
bg_purple   = "#d38aea"
bg_red      = "#ec7279"  

bg0         = "#1e1e1e"
bg1         = "#333648"
bg2         = "#363a4e"
bg3         = "#393e53"
bg4         = "#3f445b"
bg5         = "#7e7e89"

black       = "#181818"
blue        = "#8FC4EB"
blue2       = "#5b84ad"
cyan        = "#5dbbc1"

diff_blue   = "#354157"
diff_green  = "#394634"
diff_red    = "#BF616A"
diff_yellow = "#4e432f"

fg          = "#c5cdd9"
func        = "#8FBCBB"

green0      = "#8eb2af"
green       = "#5f9f7f"
green2      = "#c5eb8f"

grey        = "#7e8294"
grey_dim    = "#5c6071"

comments    = "#808080"
macro       = "#9aaaea"
numbers     = "#57B2CE"
orange      = "#CFA58D"
pink        = "#eb8fc5"
purple      = "#DBB6E7"
purple2     = "#B8A1E2"
red         = "#DD798B"
yellow      = "#EBCB8B"